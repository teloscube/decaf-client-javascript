{"version":3,"file":"index.umd.js","sources":["../src/-auth.ts","../src/-bare.ts","../src/-barista.ts","../src/-microlot.ts","../src/index.ts"],"sourcesContent":["/**\n * This module provides internal definitions for the remote DECAF API authorization.\n */\n\n/**\n * Available DECAF authentication credentials.\n */\nexport type Credentials = BasicCredentials | KeyCredentials | TokenCredentials;\n\n/**\n * DECAF \"HTTP Basic Authentication\" credentials.\n */\nexport interface BasicCredentials {\n  username: string;\n  password: string;\n}\n\n/**\n * DECAF \"Key Authentication\" credentials.\n */\nexport interface KeyCredentials {\n  key: string;\n  secret: string;\n}\n\n/**\n * DECAF \"Token Authentication\" credentials.\n */\nexport interface TokenCredentials {\n  token: string;\n}\n\n/**\n * Type predicate function for [[BasicCredentials]] instances.\n *\n * @param object object to check.\n * @return Type predicate marking the object as an instance of [[BasicCredentials]].\n */\nexport function isBasicCredentials(object: Credentials): object is BasicCredentials {\n  return 'username' in object && 'password' in object;\n}\n\n/**\n * Type predicate function for [[KeyCredentials]] instances.\n *\n * @param object object to check.\n * @return Type predicate marking the object as an instance of [[KeyCredentials]].\n */\nexport function isKeyCredentials(object: Credentials): object is KeyCredentials {\n  return 'key' in object && 'secret' in object;\n}\n\n/**\n * Type predicate function for [[TokenCredentials]] instances.\n *\n * @param object object to check.\n * @return Type predicate marking the object as an instance of [[TokenCredentials]].\n */\nexport function isTokenCredentials(object: Credentials): object is TokenCredentials {\n  return 'token' in object;\n}\n\n/**\n * Builds HTTPP Authorization header for the given [[Credentials]] instance.\n *\n * @param auth Credentials.\n * @return HTTP Authorization header.\n * @throws Error is unknown credentials is provided.\n */\nexport function getAuthorizationHeader(auth: Credentials): { Authorization: string } {\n  if (isTokenCredentials(auth)) {\n    return { Authorization: `Token ${auth.token}` };\n  } else if (isKeyCredentials(auth)) {\n    return { Authorization: `Key ${auth.key}:${auth.secret}` };\n  } else if (isBasicCredentials(auth)) {\n    if (typeof btoa === 'undefined') {\n      throw Error('btoa is undefined. Are you in node environment?');\n    }\n    return { Authorization: `Basic ${window.btoa(auth.username + ':' + auth.password)}` };\n  }\n  throw new Error('Unkown DECAF API credentials type');\n}\n","/**\n * This module provides internal definitions for the remote DECAF bare client.\n */\n\nimport axios, { AxiosInstance } from 'axios';\nimport Qs from 'qs';\nimport { Credentials, getAuthorizationHeader } from './-auth';\nimport { Remote } from './-commons';\n\n/**\n * Defines the DECAF bare client as a type alias to [[AxiosInstance]].\n */\nexport type BareClient = AxiosInstance;\n\n/**\n * Builds a DECAF bare client.\n *\n * @param remote DECAF bare deployment remote.\n * @param credentials DECAF API authentication credentials.\n * @returns A [[BareClient]] instance.\n */\nexport function buildBareClient(remote: Remote, credentials: Credentials): BareClient {\n  return axios.create({\n    baseURL: `${remote}`,\n    responseType: 'json',\n    headers: {\n      'Content-Type': 'application/json',\n      ...getAuthorizationHeader(credentials),\n    },\n    paramsSerializer: {\n      serialize: (params) => Qs.stringify(params, { arrayFormat: 'repeat' }),\n    },\n  });\n}\n","/**\n * This module provides internal definitions for the remote DECAF Barista API client.\n */\n\nimport axios, { AxiosInstance } from 'axios';\nimport Qs from 'qs';\nimport { Credentials, getAuthorizationHeader } from './-auth';\nimport { Remote } from './-commons';\n\n/**\n * Defines the DECAF Barista API client as a type alias to [[AxiosInstance]].\n */\nexport type BaristaClient = AxiosInstance;\n\n/**\n * Builds a DECAF Barista API client.\n *\n * @param remote DECAF deployment remote.\n * @param credentials DECAF API authentication credentials.\n * @returns A [[BaristaClient]] instance.\n */\nexport function buildBaristaClient(remote: Remote, credentials: Credentials): BaristaClient {\n  return axios.create({\n    baseURL: `${remote}/api`,\n    responseType: 'json',\n    headers: {\n      'Content-Type': 'application/json',\n      ...getAuthorizationHeader(credentials),\n    },\n    paramsSerializer: {\n      serialize: (params) => Qs.stringify(params, { arrayFormat: 'repeat' }),\n    },\n  });\n}\n","/**\n * This module provides internal definitions for the remote DECAF Microlot API client.\n */\n\nimport { ApolloClient, HttpLink, InMemoryCache, NormalizedCacheObject } from '@apollo/client/core';\nimport fetch from 'cross-fetch';\nimport { Credentials, getAuthorizationHeader } from './-auth';\nimport { Remote } from './-commons';\n\n/**\n * Defines the DECAF Microlot API client as a type alias to [[AxiosInstance]].\n */\nexport type MicrolotClient = ApolloClient<NormalizedCacheObject>;\n\n/**\n * Builds a DECAF Microrlot API client.\n *\n * @param remote DECAF deployment remote.\n * @param credentials DECAF API authentication credentials.\n * @returns A [[MicrolotClient]] instance.\n */\nexport function buildMicrolotClient(remote: Remote, credentials: Credentials): MicrolotClient {\n  return new ApolloClient({\n    link: new HttpLink({\n      uri: `${remote}/apis/microlot/v1/graphql`,\n      fetch,\n      headers: getAuthorizationHeader(credentials),\n    }),\n    cache: new InMemoryCache(),\n    defaultOptions: {\n      watchQuery: {\n        fetchPolicy: 'no-cache',\n        errorPolicy: 'ignore',\n      },\n      query: {\n        fetchPolicy: 'no-cache',\n        errorPolicy: 'all',\n      },\n    },\n  });\n}\n","import { Credentials } from './-auth';\nimport { BareClient, buildBareClient } from './-bare';\nimport { BaristaClient, buildBaristaClient } from './-barista';\nimport { Remote } from './-commons';\nimport { buildMicrolotClient, MicrolotClient } from './-microlot';\n\n/**\n * Type definition for remote DECAF API clients.\n */\nexport interface DecafClient {\n  bare: BareClient;\n  barista: BaristaClient;\n  microlot: MicrolotClient;\n  credentials: Credentials;\n}\n\n/**\n * Builds remote DECAF API clients.\n *\n * @param remote DECAF deployment [[Remote]].\n * @param credentials DECAF authentication credentials.\n */\nexport function buildDecafClient(remote: Remote, credentials: Credentials): DecafClient {\n  return {\n    bare: buildBareClient(remote, credentials),\n    barista: buildBaristaClient(remote, credentials),\n    microlot: buildMicrolotClient(remote, credentials),\n    credentials,\n  };\n}\n\n// Export additional symbols:\nexport { gql } from 'graphql-tag';\nexport { BasicCredentials, KeyCredentials, TokenCredentials } from './-auth';\nexport { Remote, Credentials, BaristaClient, MicrolotClient };\n"],"names":["getAuthorizationHeader","auth","Authorization","token","object","key","secret","isBasicCredentials","btoa","Error","window","username","password","buildBareClient","remote","credentials","axios","create","baseURL","responseType","headers","paramsSerializer","serialize","params","Qs","stringify","arrayFormat","buildBaristaClient","buildMicrolotClient","ApolloClient","link","HttpLink","uri","fetch","cache","InMemoryCache","defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","bare","barista","microlot"],"mappings":"yyBAqEgBA,EAAuBC,GACrC,GAXO,UAWgBA,EACrB,MAAO,CAAEC,uBAAwBD,EAAKE,UAtBjC,QADwBC,EAwBHH,IAvBF,WAAYG,EAwBpC,MAAO,CAAEF,qBAAsBD,EAAKI,QAAOJ,EAAKK,YAzBnBF,cAVEA,GACjC,MAAO,aAAcA,GAAU,aAAcA,CAC9C,CAkCYG,CAAmBN,GAAO,CACnC,GAAoB,oBAATO,KACT,MAAMC,MAAM,mDAEd,MAAO,CAAEP,uBAAwBQ,OAAOF,KAAKP,EAAKU,SAAW,IAAMV,EAAKW,UACzE,CACD,UAAUH,MAAM,oCACjB,UC5DeI,EAAgBC,EAAgBC,GAC9C,OAAOC,UAAMC,OAAO,CAClBC,WAAYJ,EACZK,aAAc,OACdC,WACE,eAAgB,oBACbpB,EAAuBe,IAE5BM,iBAAkB,CAChBC,UAAW,SAACC,UAAWC,UAAGC,UAAUF,EAAQ,CAAEG,YAAa,UAAhD,IAGhB,UCZeC,EAAmBb,EAAgBC,GACjD,OAAOC,UAAMC,OAAO,CAClBC,QAAYJ,SACZK,aAAc,OACdC,WACE,eAAgB,oBACbpB,EAAuBe,IAE5BM,iBAAkB,CAChBC,UAAW,SAACC,UAAWC,UAAGC,UAAUF,EAAQ,CAAEG,YAAa,UAAhD,IAGhB,UCZeE,EAAoBd,EAAgBC,GAClD,WAAWc,eAAa,CACtBC,KAAM,IAAIC,WAAS,CACjBC,IAAQlB,8BACRmB,MAAAA,UACAb,QAASpB,EAAuBe,KAElCmB,MAAO,IAAIC,gBACXC,eAAgB,CACdC,WAAY,CACVC,YAAa,WACbC,YAAa,UAEfC,MAAO,CACLF,YAAa,WACbC,YAAa,SAIpB,yGClBgCzB,EAAgBC,GAC/C,MAAO,CACL0B,KAAM5B,EAAgBC,EAAQC,GAC9B2B,QAASf,EAAmBb,EAAQC,GACpC4B,SAAUf,EAAoBd,EAAQC,GACtCA,YAAAA,EAEH"}